=begin pod
=TITLE Raku Documentation
=SUBTITLE The Collection files for the Raku Documentation site.

=head1 Installation

A fully automatic installation process needs information about the location of the
Rakudoc (aka POD6) sources and where the rendered html files are to be built.

This README is for the first commit, so it is assumed experienced Raku users will be
using it for the time being.

When the website is to be built automatically, there will be no need to serve it locally
so the completion plugin will not be a Cro App, but a transfer process.

The META6.json has most of the dependencies, but NOT Cro, which has been found to fail
in automatic testing environments. It is best to install Cro directly.

Installing Raku::Pod::Render can be done without the highlighter. But to build the site
with highlighted raku code requires (for the time being) C<npm>.

So
    zef install . --deps-only

in the cloned directory should work.

=head1 Building the documentation locally

Generic build steps:
=item clone this repo to C<raku-doc-website/>
=item2 No need to clone the Raku documentation sources at C<github.com/raku/doc/doc> to
C<local_raku_docs/doc/> as this is done automatically by the final step. However, if you
already have a local C<raku/doc> repo, then change the relevant key in C<config.raku>. It
should be intuitive what is required.

=item2 Note also the '_' character in the default directory name. This is important for Collection
if the document sources are under the C<raku-doc-website> because Collection treats directories
without '_' as C<mode> directories.

=item assume the rendered html will be built in C<rendered_html>

All these names can be changed by changing the relevant parts of the config.raku file

Now run

    bin_files/build-site

=head1 Directory naming

As mentioned in the items above, Collection expects a sub-directory that does not
include a '_' in its name to be a 'Mode'.

For this reason, documentation sources for this repo are in C<repo_docs> and the
binaries are in C<bin_files>.

This may eventually prove unnecessary, but I suggest the convention is kept for the time being.

Futher, I think there should be another Mode in this repository in due course that
generates an epub output.

=head1 Plugins and Templates

Collection is designed to handle multiple Modes, and for plugins to be contributed in
a similar way to Raku Modules. However, for the Raku documentation system, it seems
pragmatic at the start for the plugins to be tailored specifically for this site.

Consequently, the plugins are directly copied into the OgdenWebb directory, rather than
using Collection's C<refresh> functionality. This comment may seem odd but I include it to preclude questions
that will arise when reading the documentation for C<Collection>.

The Templates were originally developed to mimic B<Moritz Lenz's> Raku site (the one we are used to).
Relevant template keys are modified in the C<ogdenwebb> plugin.
I would expect this to change over time, and for the default templates to change
to the OgdenWebb templates. But I would suggest this is done incrementally.

=head1 Running site

Whilst this repo is being developed, a running on-line site can be found at
L<new-raku|https://new-raku.finanalyst.org>.

=head1 Working on Collection plugins

Collection uses plugins - they can be found under the directory C< OdgenWebb/plugins/ > - which
contain both callables that set up templates, associate CSS (defined using SCSS) with classes etc,
and manipulate data.

Whilst the best way to work on the plugins is, as described below, to use the dedicated
plugins distribution, it increases the learning curve and also means that there is an
extra step in directly importing Collection plugins to the Raku Documentation repo (as
mentioned above, the 'refresh' functionality of Collection is not used here).

However, to make development here easier, there are two utilities which directly affect
this distribution:
=item C<update-css> which is a Bash file and takes the name of a plugin as its argument.
=item C<bin_files/test-all-plugins> This runs all the test files in all the plugins

The best way, at present, to tweak plugins and see how they affect the website, is to install
the distribution C<raku-collection-plugin-development>. The plugin SCSS (for example) can be changed, then
updated into CSS using C<./update-css <plugin-name> >. The plugins can be tested using
C<test-all-collection-plugins>. This utility runs each of the tests under the plugin directories.

(All Collection plugins must adhere to some rules that include having a README.rakudoc file, a C<t/>
directory, and various other keys, as defined in the Collection documentation). Collection is being
designed to run multiple Collections, each of which may use different plugins, and that new plugins
can be developed as alternatives for existing plugins, but with greater functionality. In addition,
a developer can retain an older version of a plugin for a specific collection if a newer version
breaks a website. This implements a <version>.<improvement>.<patch> versionning system for all
plugins.

The effect of a tweaked plugin on the website can be tested using C<run-collection-trial OgdenWebb>. The trial subdirectory
has a (very) few Rakudoc (aka POD6) files from the raku/doc rep. The Rakudoc sources
include the most troublesome. The new website is then served to C<localhost:5000>.

If there is a problem with one source, then use

        run-collection-trial --with-only='language.rakudoc other-source and-so-on' OgdenWebb

Collection will then only render files that match one of the elements in the space-delimited list
provided with C<--with-only>. 'language.rakudoc' is a useful index file to link to other files.

There are a bunch of other options to help debugging, and they can be found in the Collection
documentation.

=end pod